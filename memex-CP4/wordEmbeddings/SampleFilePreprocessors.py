import codecs
import re
import TextPreprocessors

class SampleFilePreprocessors:
    """
    We will use this for preprocessing/prepping the sample files generated by field analyses (and possibly norm.)
    in TextPreprocessors. The first goal of the preprocessing is to ensure we have a list of words
    from the embeddings that are 'positive' and a list that are 'negative' with respect to a given class.

     An initial important step is to ensure our sample files meet the correct formatting requirements. This
     varies depending on which sample file we're looking at.
    """
    @staticmethod
    def _check_ethnicity_sample_file(sample_file):
        """

        :param sample_file:
        :return:
        """
        with codecs.open(sample_file, 'r', 'utf-8') as f:
            for line in f:
                fields = re.split('\t',line)
                if fields[1][0:-1] == 'nr':
                    if len(fields) != 2:
                        print 'error 1 in line : ',
                        print line
                    continue
                elif fields[1] != 'r' and len(fields) != 4:
                    print 'error 2 in line : ',
                    print line
                    continue
                elif fields[2] != 'ethnicity' and fields[2] != 'both':
                    print 'error 3 in line : ',
                    print line
                    continue
                else:
                    big = set(re.split(' ',fields[0]))
                    small = set(re.split(',',fields[3][0:-1]))
                    if len(small.difference(big)) != 0:
                        print 'error 4 in line : ',
                        print line
                        continue

    @staticmethod
    def _check_eyeColor_sample_file(sample_file):
        """

        :param sample_file:
        :return:
        """
        with codecs.open(sample_file, 'r', 'utf-8') as f:
            for line in f:
                fields = re.split('\t',line)
                if fields[1][0:-1] == 'nr':
                    if len(fields) != 2:
                        print 'error 1 in line : ',
                        print line
                    continue
                elif fields[1] != 'r' and len(fields) != 3:
                    print 'error 2 in line : ',
                    print line
                    continue
                else:
                    big = set(re.split(' ',fields[0]))
                    small = set(re.split(',',fields[2][0:-1]))
                    if len(small.difference(big)) != 0:
                        print 'error 3 in line : ',
                        # print small
                        # print big
                        print line
                        continue

    @staticmethod
    def _check_embeddings_coverage(sample_file, embeddings_file,
                                   preprocess_function=TextPreprocessors.TextPreprocessors._preprocess_tokens):
        """
        Designed for any sample file. Will first read in all tokens (using comma as separator) from the last
        column of sample_file, and if preprocess_function is not None, will preprocess the token list.
        Next, we'll read in the embeddings file and compute token coverage.

        Note that if multiple tokens appear in some line, it will be as if they are differnt lines. This is because
        each token would be a separate 'instance' in any ML algorithm we use.
        :param sample_file:
         :param embeddings_file:
         :param preprocess_function: a function
        :return: None
        """
        list_of_tokens = list()
        with codecs.open(sample_file, 'r', 'utf-8') as f:
            for line in f:
                last_field = re.split('\t',line)[-1][0:-1]  # take the last value, then strip out the newline.
                fields = re.split(',',last_field)
                if preprocess_function:
                    list_of_tokens += (preprocess_function(fields))


path='/home/mayankkejriwal/Downloads/memex-cp4-october/'
SampleFilePreprocessors._check_embeddings_coverage(path+'100-sampled-eyeColor-vals.txt', path+'unigram-embeddings-10000docs.json')
# print re.split(',','hazel')